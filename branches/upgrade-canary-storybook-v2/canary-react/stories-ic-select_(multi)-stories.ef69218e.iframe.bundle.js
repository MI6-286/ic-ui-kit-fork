"use strict";(self.webpackChunk_ukic_canary_react=self.webpackChunk_ukic_canary_react||[]).push([[7485],{"../canary-web-components/src/components/ic-select-with-multi/story-data.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{P_:()=>OPTIONS_WITH_DISABLED,Sk:()=>GROUPED_OPTIONS,kU:()=>OPTIONS_WITH_RECOMMENDED,lw:()=>OPTIONS,qi:()=>OPTIONS_WITH_DESCRIPTIONS});const OPTIONS=[{label:"Cappuccino",value:"Cap"},{label:"Latte",value:"Lat"},{label:"Americano",value:"Ame"},{label:"Filter",value:"Fil"},{label:"Flat white",value:"Fla"},{label:"Mocha",value:"Moc"},{label:"Macchiato",value:"Mac"}],OPTIONS_WITH_DESCRIPTIONS=[{label:"Cappuccino",value:"Cap",description:"Coffee frothed up with pressurised steam"},{label:"Latte",value:"Lat",description:"A milkier coffee than a cappuccino"},{label:"Americano",value:"Ame",description:"Espresso coffee diluted with hot water"},{label:"Filter",value:"Fil",description:"Coffee filtered using paper or a mesh"},{label:"Flat white",value:"Fla",description:"Coffee without froth made with espresso and hot steamed milk"},{label:"Mocha",value:"Moc",description:"A mixture of coffee and chocolate"},{label:"Macchiato",value:"Mac",description:"Espresso coffee with a dash of frothy steamed milk"}],OPTIONS_WITH_DISABLED=[{label:"Cappuccino",value:"Cap"},{label:"Latte",value:"Lat",disabled:!0},{label:"Americano",value:"Ame"},{label:"Filter",value:"Fil",disabled:!0},{label:"Flat white",value:"Fla",disabled:!0},{label:"Mocha",value:"Moc"},{label:"Macchiato",value:"Mac"}],GROUPED_OPTIONS=[{label:"Fancy",children:[{label:"Cappuccino",value:"Cap"},{label:"Flat white",value:"Flat"}]},{label:"Boring",children:[{label:"Filter",value:"Fil"},{label:"Latte",value:"Lat"}]}],OPTIONS_WITH_RECOMMENDED=[{label:"Cappuccino",value:"Cap"},{label:"Latte",value:"Lat"},{label:"Americano",value:"Ame",recommended:!0},{label:"Filter",value:"Fil"},{label:"Flat white",value:"Fla",recommended:!0},{label:"Mocha",value:"Moc"},{label:"Macchiato",value:"Mac"}]},"./src/stories/ic-select_(multi).stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,DefaultValue:()=>DefaultValue,Disabled:()=>Disabled,DisabledOptions:()=>DisabledOptions,Groups:()=>Groups,HelperText:()=>HelperText,HiddenLabel:()=>HiddenLabel,LoadingWithError_:()=>LoadingWithError_,PlaygroundExample:()=>PlaygroundExample,ReadOnly:()=>ReadOnly,Recommended:()=>Recommended,Required:()=>Required,Sizes:()=>Sizes,Validation:()=>Validation,WithClearButton:()=>WithClearButton,WithDescriptions:()=>WithDescriptions,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_canary_web_components_src_components_ic_select_with_multi_readme_md__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../canary-web-components/src/components/ic-select-with-multi/readme.md"),_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../canary-web-components/src/components/ic-select-with-multi/story-data.ts"),_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components.ts");const LoadingWithError=()=>{const selectEl=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{ref:selectEl,label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.lw,multiple:!0,loading:!0,timeout:"1000",onIcChange:event=>console.log(`icChange: ${event.detail.value}`),onIcRetryLoad:event=>selectEl.current.loading=!0})},playgroundOptions=[{label:"Cappuccino",value:"Cap",description:"Coffee frothed up with pressurised steam"},{label:"Boring",children:[{label:"Latte",value:"Lat",description:"A milkier coffee than a cappuccino"},{label:"Filter",value:"Fil",description:"Coffee filtered using paper or a mesh"}]},{label:"Fancy",children:[{label:"Flat white",value:"Fla",description:"Coffee without froth made with espresso and hot steamed milk"},{label:"Macchiato",value:"Mac",description:"Espresso coffee with a dash of frothy steamed milk"}]},{label:"Americano",value:"Ame",description:"Espresso coffee diluted with hot water"},{label:"Mocha",value:"Moc",description:"A mixture of coffee and chocolate"}],__WEBPACK_DEFAULT_EXPORT__={title:"React Components/Multi-Select",component:_components__WEBPACK_IMPORTED_MODULE_3__.gs,parameters:{componentAPI:{data:_canary_web_components_src_components_ic_select_with_multi_readme_md__WEBPACK_IMPORTED_MODULE_1__}}},Default={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"430px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.lw,multiple:!0,onIcChange:event=>console.log(`icChange: ${event.detail.value}`),onIcOptionSelect:event=>console.log(`icOptionSelect: ${event.detail.value}`),onIcOptionDeselect:event=>console.log(`icOptionDeselect: ${event.detail.value}`)})),name:"Default"},DefaultValue={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"430px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.lw,multiple:!0,value:["Ame","Fil","Moc"],onIcChange:event=>console.log(`icChange: ${event.detail.value}`)})),name:"Default Value"},WithClearButton={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"430px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.lw,multiple:!0,showClearButton:!0,onIcChange:event=>console.log(`icChange: ${event.detail.value}`)})),name:"With Clear Button"},WithDescriptions={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"470px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.qi,multiple:!0,onIcChange:event=>console.log(`icChange: ${event.detail.value}`)})),name:"With Descriptions"},HelperText={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"450px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.lw,multiple:!0,helperText:"Select some options from the list",onIcChange:event=>console.log(`icChange: ${event.detail.value}`)})),name:"Helper Text"},Sizes={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"16px",height:"650px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.lw,multiple:!0,size:"small",onIcChange:event=>console.log(`icChange: ${event.detail.value}`)}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.lw,multiple:!0,onIcChange:event=>console.log(`icChange: ${event.detail.value}`)}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.lw,multiple:!0,size:"large",onIcChange:event=>console.log(`icChange: ${event.detail.value}`)})),name:"Sizes"},Disabled={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"200px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.lw,multiple:!0,disabled:!0,onIcChange:event=>console.log(`icChange: ${event.detail.value}`)})),name:"Disabled"},DisabledOptions={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"430px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.P_,multiple:!0,onIcChange:event=>console.log(`icChange: ${event.detail.value}`)})),name:"Disabled Options"},HiddenLabel={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"400px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.lw,multiple:!0,hideLabel:!0,onIcChange:event=>console.log(`icChange: ${event.detail.value}`)})),name:"Hidden label"},Required={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"430px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.lw,multiple:!0,required:!0,onIcChange:event=>console.log(`icChange: ${event.detail.value}`)})),name:"Required"},ReadOnly={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"200px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.lw,multiple:!0,readonly:!0,value:["Cap","Fla","Moc"],onIcChange:event=>console.log(`icChange: ${event.detail.value}`)})),name:"Read-only"},Groups={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"430px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.Sk,multiple:!0,onIcChange:event=>console.log(`icChange: ${event.detail.value}`)})),name:"Groups"},Recommended={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"430px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.kU,multiple:!0,onIcChange:event=>console.log(`icChange: ${event.detail.value}`)})),name:"Recommended"},Validation={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"640px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.lw,multiple:!0,validationStatus:"success",validationText:"Coffee available",onIcChange:event=>console.log(`icChange: ${event.detail.value}`)}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.lw,multiple:!0,validationStatus:"warning",validationText:"Only a few left",onIcChange:event=>console.log(`icChange: ${event.detail.value}`)}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{label:"What are your favourite types of coffee?",options:_canary_web_components_src_components_ic_select_with_multi_story_data__WEBPACK_IMPORTED_MODULE_2__.lw,multiple:!0,validationStatus:"error",validationText:"Coffee unavailable",onIcChange:event=>console.log(`icChange: ${event.detail.value}`)})),name:"Validation"},LoadingWithError_={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"430px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(LoadingWithError,null)),name:"Loading With Error"},PlaygroundExample={render:args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"500px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.gs,{multiple:!0,options:playgroundOptions,disabled:args.disabled,fullWidth:args.fullWidth,helperText:args.helperText,hideLabel:args.hideLabel,loading:args.loading,loadingLabel:args.loadingLabel,label:args.label,placeholder:args.placeholder,readonly:args.readonly,required:args.required,size:args.size,validationStatus:args.validationStatus,validationText:args.validationText,showClearButton:args.showClearButton})),name:"Playground Example",args:{disabled:!1,fullWidth:!1,helperText:"Select some options from the list",hideLabel:!1,loading:!1,loadingLabel:"Loading...",label:"What is your favourite coffee?",placeholder:"Select an option",readonly:!1,required:!1,size:"default",validationStatus:"",validationText:"",showClearButton:!1},argTypes:{size:{options:["default","large","small"],control:{type:"inline-radio"}},validationStatus:{defaultValue:"",options:["","error","success","warning"],control:{type:"select"}}}},__namedExportsOrder=["Default","DefaultValue","WithClearButton","WithDescriptions","HelperText","Sizes","Disabled","DisabledOptions","HiddenLabel","Required","ReadOnly","Groups","Recommended","Validation","LoadingWithError_","PlaygroundExample"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    height: "430px"\n  }}>\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS} multiple onIcChange={event => console.log(`icChange: ${event.detail.value}`)} onIcOptionSelect={event => console.log(`icOptionSelect: ${event.detail.value}`)} onIcOptionDeselect={event => console.log(`icOptionDeselect: ${event.detail.value}`)} />\n    </div>,\n  name: "Default"\n}',...Default.parameters?.docs?.source}}},DefaultValue.parameters={...DefaultValue.parameters,docs:{...DefaultValue.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    height: "430px"\n  }}>\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS} multiple value={["Ame", "Fil", "Moc"]} onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n    </div>,\n  name: "Default Value"\n}',...DefaultValue.parameters?.docs?.source}}},WithClearButton.parameters={...WithClearButton.parameters,docs:{...WithClearButton.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    height: "430px"\n  }}>\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS} multiple showClearButton onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n    </div>,\n  name: "With Clear Button"\n}',...WithClearButton.parameters?.docs?.source}}},WithDescriptions.parameters={...WithDescriptions.parameters,docs:{...WithDescriptions.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    height: "470px"\n  }}>\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS_WITH_DESCRIPTIONS} multiple onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n    </div>,\n  name: "With Descriptions"\n}',...WithDescriptions.parameters?.docs?.source}}},HelperText.parameters={...HelperText.parameters,docs:{...HelperText.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    height: "450px"\n  }}>\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS} multiple helperText="Select some options from the list" onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n    </div>,\n  name: "Helper Text"\n}',...HelperText.parameters?.docs?.source}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    display: "flex",\n    flexDirection: "column",\n    gap: "16px",\n    height: "650px"\n  }}>\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS} multiple size="small" onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS} multiple onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS} multiple size="large" onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n    </div>,\n  name: "Sizes"\n}',...Sizes.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    height: "200px"\n  }}>\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS} multiple disabled onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n    </div>,\n  name: "Disabled"\n}',...Disabled.parameters?.docs?.source}}},DisabledOptions.parameters={...DisabledOptions.parameters,docs:{...DisabledOptions.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    height: "430px"\n  }}>\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS_WITH_DISABLED} multiple onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n    </div>,\n  name: "Disabled Options"\n}',...DisabledOptions.parameters?.docs?.source}}},HiddenLabel.parameters={...HiddenLabel.parameters,docs:{...HiddenLabel.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    height: "400px"\n  }}>\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS} multiple hideLabel onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n    </div>,\n  name: "Hidden label"\n}',...HiddenLabel.parameters?.docs?.source}}},Required.parameters={...Required.parameters,docs:{...Required.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    height: "430px"\n  }}>\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS} multiple required onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n    </div>,\n  name: "Required"\n}',...Required.parameters?.docs?.source}}},ReadOnly.parameters={...ReadOnly.parameters,docs:{...ReadOnly.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    height: "200px"\n  }}>\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS} multiple readonly value={["Cap", "Fla", "Moc"]} onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n    </div>,\n  name: "Read-only"\n}',...ReadOnly.parameters?.docs?.source}}},Groups.parameters={...Groups.parameters,docs:{...Groups.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    height: "430px"\n  }}>\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={GROUPED_OPTIONS} multiple onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n    </div>,\n  name: "Groups"\n}',...Groups.parameters?.docs?.source}}},Recommended.parameters={...Recommended.parameters,docs:{...Recommended.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    height: "430px"\n  }}>\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS_WITH_RECOMMENDED} multiple onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n    </div>,\n  name: "Recommended"\n}',...Recommended.parameters?.docs?.source}}},Validation.parameters={...Validation.parameters,docs:{...Validation.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    height: "640px"\n  }}>\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS} multiple validationStatus="success" validationText="Coffee available" onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS} multiple validationStatus="warning" validationText="Only a few left" onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n      <IcSelectWithMulti label="What are your favourite types of coffee?" options={OPTIONS} multiple validationStatus="error" validationText="Coffee unavailable" onIcChange={event => console.log(`icChange: ${event.detail.value}`)} />\n    </div>,\n  name: "Validation"\n}',...Validation.parameters?.docs?.source}}},LoadingWithError_.parameters={...LoadingWithError_.parameters,docs:{...LoadingWithError_.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    height: "430px"\n  }}>\n      <LoadingWithError />\n    </div>,\n  name: "Loading With Error"\n}',...LoadingWithError_.parameters?.docs?.source}}},PlaygroundExample.parameters={...PlaygroundExample.parameters,docs:{...PlaygroundExample.parameters?.docs,source:{originalSource:'{\n  render: args => <div style={{\n    height: "500px"\n  }}>\n      <IcSelectWithMulti multiple options={playgroundOptions} disabled={args.disabled} fullWidth={args.fullWidth} helperText={args.helperText} hideLabel={args.hideLabel} loading={args.loading} loadingLabel={args.loadingLabel} label={args.label} placeholder={args.placeholder} readonly={args.readonly} required={args.required} size={args.size} validationStatus={args.validationStatus} validationText={args.validationText} showClearButton={args.showClearButton} />\n    </div>,\n  name: "Playground Example",\n  args: defaultArgs,\n  argTypes: {\n    size: {\n      options: ["default", "large", "small"],\n      control: {\n        type: "inline-radio"\n      }\n    },\n    validationStatus: {\n      defaultValue: "",\n      options: ["", "error", "success", "warning"],\n      control: {\n        type: "select"\n      }\n    }\n  }\n}',...PlaygroundExample.parameters?.docs?.source}}}},"../canary-web-components/src/components/ic-select-with-multi/readme.md":module=>{module.exports='# ic-select\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property                      | Attribute                        | Description                                                                                                                                                                                                                                                                | Type                                      | Default              |\n| ----------------------------- | -------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------- | -------------------- |\n| `charactersUntilSuggestions`  | `characters-until-suggestions`   | **[DEPRECATED]** This prop should not be used anymore.                                                                                                                                                                                                                     | `number`                                  | `0`                  |\n| `debounce`                    | `debounce`                       | The amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.                                                                                                                                                                         | `number`                                  | `0`                  |\n| `disableFilter`               | `disable-filter`                 | If `true`, the built in filtering will be disabled for a searchable variant. For example, if options will already be filtered from external source.                                                                                                                        | `boolean`                                 | `false`              |\n| `disabled`                    | `disabled`                       | If `true`, the disabled state will be set.                                                                                                                                                                                                                                 | `boolean`                                 | `false`              |\n| `emptyOptionListText`         | `empty-option-list-text`         | The text displayed when there are no options in the option list.                                                                                                                                                                                                           | `string`                                  | `"No results found"` |\n| `form`                        | `form`                           | The <form> element to associate the select with.                                                                                                                                                                                                                           | `string`                                  | `undefined`          |\n| `formaction`                  | `formaction`                     | The URL that processes the information submitted by the select. It overrides the action attribute of the select\'s form owner. Does nothing if there is no form owner. This prop should only be used with searchable select and will only be applied if searchable is true. | `string`                                  | `undefined`          |\n| `formenctype`                 | `formenctype`                    | The way the submitted form data is encoded. This prop should only be used with searchable select and will only be applied if searchable is true.                                                                                                                           | `string`                                  | `undefined`          |\n| `formmethod`                  | `formmethod`                     | The HTTP method used to submit the form. This prop should only be used with searchable select and will only be applied if searchable is true.                                                                                                                              | `string`                                  | `undefined`          |\n| `formnovalidate`              | `formnovalidate`                 | If `true`, the form will not be validated when submitted. This prop should only be used with searchable select and will only be applied if searchable is true.                                                                                                             | `boolean`                                 | `undefined`          |\n| `formtarget`                  | `formtarget`                     | The place to display the response from submitting the form. It overrides the target attribute of the select\'s form owner. This prop should only be used with searchable select and will only be applied if searchable is true.                                             | `string`                                  | `undefined`          |\n| `fullWidth`                   | `full-width`                     | If `true`, the select element will fill the width of the container. This prop should only be used with searchable select and will only be applied if searchable is true.                                                                                                   | `boolean`                                 | `false`              |\n| `helperText`                  | `helper-text`                    | The helper text that will be displayed for additional field guidance.                                                                                                                                                                                                      | `string`                                  | `""`                 |\n| `hideLabel`                   | `hide-label`                     | If `true`, the label will be hidden and the required label value will be applied as an aria-label.                                                                                                                                                                         | `boolean`                                 | `false`              |\n| `includeDescriptionsInSearch` | `include-descriptions-in-search` | If `true`, descriptions of options will be included when filtering options in a searchable select. Only applies to built in filtering.                                                                                                                                     | `boolean`                                 | `false`              |\n| `includeGroupTitlesInSearch`  | `include-group-titles-in-search` | If `true`, group titles of grouped options will be included when filtering options in a searchable select. Only applies to built in filtering.                                                                                                                             | `boolean`                                 | `false`              |\n| `label` _(required)_          | `label`                          | The label for the select.                                                                                                                                                                                                                                                  | `string`                                  | `undefined`          |\n| `loading`                     | `loading`                        | If `true`, the loading state will be triggered when fetching options asynchronously.                                                                                                                                                                                       | `boolean`                                 | `false`              |\n| `loadingErrorLabel`           | `loading-error-label`            | The message displayed when external loading times out.                                                                                                                                                                                                                     | `string`                                  | `"Loading Error"`    |\n| `loadingLabel`                | `loading-label`                  | The message displayed whilst the options are being loaded externally.                                                                                                                                                                                                      | `string`                                  | `"Loading..."`       |\n| `multiple`                    | `multiple`                       | If `true`, multiple options can be selected.                                                                                                                                                                                                                               | `boolean`                                 | `false`              |\n| `name`                        | `name`                           | The name of the control, which is submitted with the form data.                                                                                                                                                                                                            | `string`                                  | `this.inputId`       |\n| `options`                     | --                               | The possible selection options.                                                                                                                                                                                                                                            | `IcMenuOption[]`                          | `[]`                 |\n| `placeholder`                 | `placeholder`                    | The placeholder value to be displayed.                                                                                                                                                                                                                                     | `string`                                  | `"Select an option"` |\n| `readonly`                    | `readonly`                       | If `true`, the readonly state will be set.                                                                                                                                                                                                                                 | `boolean`                                 | `false`              |\n| `required`                    | `required`                       | If `true`, the select will require a value.                                                                                                                                                                                                                                | `boolean`                                 | `false`              |\n| `searchMatchPosition`         | `search-match-position`          | Whether the search string of the searchable select should match the start of or anywhere in the options. Only applies to built in filtering.                                                                                                                               | `"anywhere" \\| "start"`                   | `"anywhere"`         |\n| `searchable`                  | `searchable`                     | If `true`, a searchable variant of the select will be displayed which can be typed in to filter options. This functionality is only available on the single-select variant of the select component.                                                                        | `boolean`                                 | `false`              |\n| `selectOnEnter`               | `select-on-enter`                | If `true`, the icOptionSelect event will be fired on enter instead of ArrowUp and ArrowDown.                                                                                                                                                                               | `boolean`                                 | `false`              |\n| `showClearButton`             | `show-clear-button`              | If `true`, a button which clears the select input when clicked will be displayed. The button will always appear on the searchable select.                                                                                                                                  | `boolean`                                 | `false`              |\n| `size`                        | `size`                           | The size of the select.                                                                                                                                                                                                                                                    | `"default" \\| "large" \\| "small"`         | `"default"`          |\n| `small`                       | `small`                          | **[DEPRECATED]** This prop should not be used anymore. Set prop `size` to "small" instead.                                                                                                                                                                                 | `boolean`                                 | `false`              |\n| `timeout`                     | `timeout`                        | If using external filtering, set a timeout for when loading takes too long.                                                                                                                                                                                                | `number`                                  | `undefined`          |\n| `validationStatus`            | `validation-status`              | The validation status - e.g. \'error\' \\| \'warning\' \\| \'success\'.                                                                                                                                                                                                            | `"" \\| "error" \\| "success" \\| "warning"` | `""`                 |\n| `validationText`              | `validation-text`                | The text to display as the validation message.                                                                                                                                                                                                                             | `string`                                  | `""`                 |\n| `value`                       | `value`                          | The value of the select, reflected by the value of the currently selected option. For the searchable variant, the value is also reflected by the user input. For the multi-select variant, the value must be an array of option values.                                    | `string \\| string[]`                      | `undefined`          |\n\n\n## Events\n\n| Event              | Description                                                                                                                        | Type                                     |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------- |\n| `icBlur`           | Emitted when the select loses focus.                                                                                               | `CustomEvent<void>`                      |\n| `icChange`         | Emitted when the value changes.                                                                                                    | `CustomEvent<IcValueEventDetail>`        |\n| `icClear`          | Emitted when the clear button is clicked.                                                                                          | `CustomEvent<void>`                      |\n| `icFocus`          | Emitted when the select gains focus.                                                                                               | `CustomEvent<void>`                      |\n| `icInput`          | Emitted when a keyboard input occurred.                                                                                            | `CustomEvent<IcValueEventDetail>`        |\n| `icOptionDeselect` | Emitted when `multiple` is `true` and an option is deselected.                                                                     | `CustomEvent<IcOptionSelectEventDetail>` |\n| `icOptionSelect`   | Emitted when an option is selected. Selecting an option will also trigger an `icChange/onIcChange` due to the value being updated. | `CustomEvent<IcOptionSelectEventDetail>` |\n| `icRetryLoad`      | Emitted when the \'retry loading\' button is clicked for a searchable variant.                                                       | `CustomEvent<IcValueEventDetail>`        |\n\n\n## Methods\n\n### `setFocus() => Promise<void>`\n\nSets focus on the input box.\n\n#### Returns\n\nType: `Promise<void>`\n\n\n\n\n## CSS Custom Properties\n\n| Name                | Description                |\n| ------------------- | -------------------------- |\n| `--ic-z-index-menu` | z-index of select menu     |\n| `--input-width`     | Width of the input field   |\n| `--menu-width`      | Width of the dropdown menu |\n\n\n## Dependencies\n\n### Depends on\n\n- ic-input-container\n- ic-input-label\n- ic-input-component-container\n- ic-typography\n- ic-button\n- [ic-menu-with-multi](../ic-menu-with-multi)\n- ic-input-validation\n\n### Graph\n```mermaid\ngraph TD;\n  ic-select-with-multi --\x3e ic-input-container\n  ic-select-with-multi --\x3e ic-input-label\n  ic-select-with-multi --\x3e ic-input-component-container\n  ic-select-with-multi --\x3e ic-typography\n  ic-select-with-multi --\x3e ic-button\n  ic-select-with-multi --\x3e ic-menu-with-multi\n  ic-select-with-multi --\x3e ic-input-validation\n  ic-input-label --\x3e ic-typography\n  ic-button --\x3e ic-loading-indicator\n  ic-button --\x3e ic-tooltip\n  ic-loading-indicator --\x3e ic-typography\n  ic-tooltip --\x3e ic-typography\n  ic-menu-with-multi --\x3e ic-loading-indicator\n  ic-menu-with-multi --\x3e ic-typography\n  ic-menu-with-multi --\x3e ic-button\n  ic-input-validation --\x3e ic-typography\n  style ic-select-with-multi fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n\n'}}]);