"use strict";(self.webpackChunk_ukic_react=self.webpackChunk_ukic_react||[]).push([[1982],{"./src/react-component-lib/slottedSVG.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{k:()=>SlottedSVG});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const defaultProps={xmlns:"http://www.w3.org/2000/svg"};const SlottedSVG=_ref=>{let{path,slot:slotName,children,...props}=_ref;return react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",_extends({},function slot(){let name=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return{ref:e=>e?e.setAttribute("slot",name):null}}(slotName),props,defaultProps),!!path&&react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:path}),children)};try{SlottedSVG.displayName="SlottedSVG",SlottedSVG.__docgenInfo={description:"",displayName:"SlottedSVG",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/react-component-lib/slottedSVG.tsx#SlottedSVG"]={docgenInfo:SlottedSVG.__docgenInfo,name:"SlottedSVG",path:"src/react-component-lib/slottedSVG.tsx#SlottedSVG"})}catch(__react_docgen_typescript_loader_error){}},"./src/stories/ic-text-field.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Controlled:()=>Controlled,Default:()=>Default,Disabled:()=>Disabled,FullWidth:()=>FullWidth,HelperText:()=>HelperText,HiddenInput_:()=>HiddenInput_,MaxLength:()=>MaxLength,MaxLengthMessage:()=>MaxLengthMessage,MaximumAndMinimumCharacters:()=>MaximumAndMinimumCharacters,MinAndMax:()=>MinAndMax,PlaceholderAndRequired:()=>PlaceholderAndRequired,Playground:()=>Playground,ReadOnly:()=>ReadOnly,TextAreaWithResize:()=>TextAreaWithResize,Uncontrolled_:()=>Uncontrolled_,Validation:()=>Validation,WithIcon:()=>WithIcon,WithNullValue:()=>WithNullValue,WithUndefinedValue:()=>WithUndefinedValue,WithValue:()=>WithValue,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components.ts"),_react_component_lib_slottedSVG__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/react-component-lib/slottedSVG.tsx");__webpack_require__("../web-components/src/components/ic-text-field/readme.md");function _slicedToArray(r,e){return function _arrayWithHoles(r){if(Array.isArray(r))return r}(r)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(r,e)||function _unsupportedIterableToArray(r,a){if(r){if("string"==typeof r)return _arrayLikeToArray(r,a);var t={}.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(r,a):void 0}}(r,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(r,a){(null==a||a>r.length)&&(a=r.length);for(var e=0,n=Array(a);e<a;e++)n[e]=r[e];return n}var SlottedIcon=function SlottedIcon(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_react_component_lib_slottedSVG__WEBPACK_IMPORTED_MODULE_2__.k,{slot:"icon",xmlns:"http://www.w3.org/2000/svg",height:"24px",viewBox:"0 0 24 24",width:"24px",fill:"#000000"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z"}))},ControlledExample=function ControlledExample(){var _useState2=_slicedToArray((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(""),2),value=_useState2[0],setValue=_useState2[1];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{placeholder:"Controlled",label:"Controlled",value,onIcChange:function handleChange(event){console.log(event.detail.value),setValue(event.detail.value)}})},Uncontrolled=function Uncontrolled(){var textFieldEl=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{ref:textFieldEl,placeholder:"Uncontrolled",label:"Uncontrolled",onIcChange:function handleChange(){console.log(textFieldEl.current.value)}})},HiddenInput=function HiddenInput(){var _useState4=_slicedToArray((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0),2),renderHidden=_useState4[0],setRenderHidden=_useState4[1];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{label:"my label",hiddenInput:renderHidden}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.nP,{onClick:function onClick(){return function handleChange(){setRenderHidden(!renderHidden)}()}},"Toggle hidden input"))};const __WEBPACK_DEFAULT_EXPORT__={title:"Text field",component:_components__WEBPACK_IMPORTED_MODULE_3__.k2};var Default={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{label:"What is your favourite coffee?"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{rows:"6",label:"What is your favourite coffee?"}))},name:"Default"},PlaceholderAndRequired={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{rows:"6",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder"}))},name:"Placeholder and required"},HelperText={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{rows:"6",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}))},name:"Helper text"},WithIcon={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{rows:"6",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)))},name:"With icon"},WithValue={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{rows:"6",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)))},name:"With value"},WithNullValue={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{value:null,label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{rows:"6",value:null,label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)))},name:"With null value"},WithUndefinedValue={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{value:void 0,label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{rows:"6",value:void 0,label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)))},name:"With undefined value"},MaxLength={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{rows:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}))},name:"Max length"},MaxLengthMessage={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",maxLengthMessage:"You have exceeded the maximum length"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{rows:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",maxLengthMessage:"You have exceeded the maximum length"}))},name:"Max length message"},FullWidth={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{fullWidth:"true",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{fullWidth:"true",true:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}))},name:"Full width"},Disabled={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{disabled:!0,maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{rows:"6",disabled:!0,maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}))},name:"Disabled"},ReadOnly={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{readonly:!0,maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{rows:"6",readonly:!0,maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}))},name:"Read only"},Validation={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"success",validationText:"Good choice!"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{rows:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"success",validationText:"Good choice!"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"success",validationText:"Good choice!",validationInline:!0},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{maxLength:"25",size:"small",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"success",validationText:"Good choice!",validationInline:!0},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"warning",validationText:"A very long warning message to test if wrapping works"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{rows:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"warning",validationText:"A very long warning message to test if wrapping works"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{maxLength:"25",value:"Tea",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"error",validationText:"Now it has really gone to (coffee) pot"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{rows:"6",maxLength:"25",value:"Tea",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"error",validationText:"Now it has really gone to (coffee) pot"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{validationStatus:"error",validationText:"now it has really gone to (coffee) pot",value:"6",inputmode:"numeric",label:"How many coffees do you want?",helperText:"Our coffee machines have a maximum capacity of 4 coffees at a time.",type:"number",min:"1",max:"4",required:!0},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{validationStatus:"error",validationText:"now it has really gone to (coffee) pot",value:"0",inputmode:"numeric",label:"How many coffees do you want?",helperText:"Our coffee machines have a maximum capacity of 4 coffees at a time.",type:"number",min:"1",max:"4",required:!0},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{validationStatus:"error",validationText:"I'm not familiar with this type of coffee",validationInlineInternal:"true",value:"Milkshake",label:"What is your favourite coffee?",required:!0,hideLabel:!0,size:"small",placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlottedIcon,null)))},name:"Validation"},TextAreaWithResize={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{rows:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",resize:!0,size:"small"})},name:"Text area with resize"},Controlled={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ControlledExample,null)},name:"Controlled"},Uncontrolled_={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Uncontrolled,null)},name:"Uncontrolled"},MinAndMax={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{inputmode:"numeric",label:"How many coffees do you want?",type:"number",min:1,max:4,helperText:"Our coffee machines have a maximum capacity of 4 coffees at a time."})},name:"Min and max"},MaximumAndMinimumCharacters={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{"max-characters":2,label:"What is your favourite coffee?","helper-text":"Short answers only."}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{"min-characters":3,label:"What is your favourite coffee?","helper-text":"Long answer please."}))},name:"Maximum and minimum characters"},HiddenInput_={render:function render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(HiddenInput,null)},name:"Hidden input"},Playground={render:function render(args){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_3__.k2,{label:args.label,disabled:args.disabled,fullWidth:args.fullWidth,helperText:args.helperText,hideLabel:args.hideLabel,inputId:args.inputId,inputmode:args.inputmode,max:args.max,maxCharacters:args.maxCharacters,maxLength:args.maxLength,maxLengthMessage:args.maxLengthMessage,min:args.min,minCharacters:args.minCharacters,name:args.name,placeholder:args.placeholder,readonly:args.readonly,required:args.required,resize:args.resize,rows:args.rows,size:args.size,spellcheck:args.spellcheck,type:args.type,validationInline:args.validationInline,validationStatus:args.validationStatus,validationText:args.validationText,debounce:args.debounce,onIcChange:function onIcChange(ev){return console.log(ev.detail.value)}},args.showIconSlot&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_react_component_lib_slottedSVG__WEBPACK_IMPORTED_MODULE_2__.k,{slot:"icon",xmlns:"http://www.w3.org/2000/svg",height:"24px",viewBox:"0 0 24 24",width:"24px",fill:"#000000"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{d:"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z"})))},args:{disabled:!1,fullWidth:!1,helperText:"",hideLabel:!1,inputId:"ic-text-field-input-0",inputmode:"text",label:"Text Field",maxCharacters:0,maxLength:0,maxLengthMessage:"Too many characters",minCharacters:0,name:"0",placeholder:"",readonly:!1,required:!1,resize:!1,rows:1,size:"default",spellcheck:!1,type:"text",validationInline:!1,validationStatus:"none",validationText:"",debounce:0},argTypes:{inputmode:{options:["none","text","tel","url","email","numeric","decimal","search"],control:{type:"select"}},size:{options:["default","small"],control:{type:"inline-radio"}},type:{options:["email","password","tel","text","url","number","search"],control:{type:"select"}},validationStatus:{options:["warning","error","success","none"],mapping:{warning:"warning",error:"error",success:"success",none:""},control:{type:"select"}},showIconSlot:{control:{type:"boolean"}}},name:"Playground"};const __namedExportsOrder=["Default","PlaceholderAndRequired","HelperText","WithIcon","WithValue","WithNullValue","WithUndefinedValue","MaxLength","MaxLengthMessage","FullWidth","Disabled","ReadOnly","Validation","TextAreaWithResize","Controlled","Uncontrolled_","MinAndMax","MaximumAndMinimumCharacters","HiddenInput_","Playground"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n          <IcTextField label="What is your favourite coffee?" />\n          <IcTextField rows="6" label="What is your favourite coffee?" />\n    </>,\n  name: "Default"\n}',...Default.parameters?.docs?.source}}},PlaceholderAndRequired.parameters={...PlaceholderAndRequired.parameters,docs:{...PlaceholderAndRequired.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <IcTextField label="What is your favourite coffee?" required placeholder="Placeholder" />\n    <IcTextField rows="6" label="What is your favourite coffee?" required placeholder="Placeholder" />\n    </>,\n  name: "Placeholder and required"\n}',...PlaceholderAndRequired.parameters?.docs?.source}}},HelperText.parameters={...HelperText.parameters,docs:{...HelperText.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <IcTextField label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />\n    <IcTextField rows="6" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />\n    </>,\n  name: "Helper text"\n}',...HelperText.parameters?.docs?.source}}},WithIcon.parameters={...WithIcon.parameters,docs:{...WithIcon.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <IcTextField label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica">\n      <SlottedIcon />\n    </IcTextField>\n    <IcTextField rows="6" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica">\n      <SlottedIcon />\n    </IcTextField>\n    </>,\n  name: "With icon"\n}',...WithIcon.parameters?.docs?.source}}},WithValue.parameters={...WithValue.parameters,docs:{...WithValue.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <IcTextField value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica">\n      <SlottedIcon />\n    </IcTextField>\n    <IcTextField rows="6" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica">\n      <SlottedIcon />\n    </IcTextField>\n    </>,\n  name: "With value"\n}',...WithValue.parameters?.docs?.source}}},WithNullValue.parameters={...WithNullValue.parameters,docs:{...WithNullValue.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <IcTextField value={null} label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica">\n      <SlottedIcon />\n    </IcTextField>\n    <IcTextField rows="6" value={null} label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica">\n      <SlottedIcon />\n    </IcTextField>\n    </>,\n  name: "With null value"\n}',...WithNullValue.parameters?.docs?.source}}},WithUndefinedValue.parameters={...WithUndefinedValue.parameters,docs:{...WithUndefinedValue.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <IcTextField value={undefined} label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica">\n      <SlottedIcon />\n    </IcTextField>\n    <IcTextField rows="6" value={undefined} label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica">\n      <SlottedIcon />\n    </IcTextField>\n    </>,\n  name: "With undefined value"\n}',...WithUndefinedValue.parameters?.docs?.source}}},MaxLength.parameters={...MaxLength.parameters,docs:{...MaxLength.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <IcTextField maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />\n    <IcTextField rows="6" maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />\n    </>,\n  name: "Max length"\n}',...MaxLength.parameters?.docs?.source}}},MaxLengthMessage.parameters={...MaxLengthMessage.parameters,docs:{...MaxLengthMessage.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <IcTextField maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" maxLengthMessage="You have exceeded the maximum length" />\n    <IcTextField rows="6" maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" maxLengthMessage="You have exceeded the maximum length" />\n    </>,\n  name: "Max length message"\n}',...MaxLengthMessage.parameters?.docs?.source}}},FullWidth.parameters={...FullWidth.parameters,docs:{...FullWidth.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <IcTextField fullWidth="true" maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />\n    <IcTextField fullWidth="true" true="6" maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />\n    </>,\n  name: "Full width"\n}',...FullWidth.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <IcTextField disabled maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />\n    <IcTextField rows="6" disabled maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />\n    </>,\n  name: "Disabled"\n}',...Disabled.parameters?.docs?.source}}},ReadOnly.parameters={...ReadOnly.parameters,docs:{...ReadOnly.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <IcTextField readonly maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />\n    <IcTextField rows="6" readonly maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />\n    </>,\n  name: "Read only"\n}',...ReadOnly.parameters?.docs?.source}}},Validation.parameters={...Validation.parameters,docs:{...Validation.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <IcTextField maxLength="25" value="Arabica" label="What is your favourite coffee?" required helperText="Such as Arabica, Robusta or Liberica" validationStatus="success" validationText="Good choice!">\n      <SlottedIcon />\n    </IcTextField>\n    <IcTextField rows="6" maxLength="25" value="Arabica" label="What is your favourite coffee?" required helperText="Such as Arabica, Robusta or Liberica" validationStatus="success" validationText="Good choice!">\n      <SlottedIcon />\n    </IcTextField>\n    <IcTextField maxLength="25" value="Arabica" label="What is your favourite coffee?" required helperText="Such as Arabica, Robusta or Liberica" validationStatus="success" validationText="Good choice!" validationInline>\n      <SlottedIcon />\n    </IcTextField>\n    <IcTextField maxLength="25" size="small" value="Arabica" label="What is your favourite coffee?" required helperText="Such as Arabica, Robusta or Liberica" validationStatus="success" validationText="Good choice!" validationInline>\n      <SlottedIcon />\n    </IcTextField>\n    <IcTextField maxLength="25" value="Arabica" label="What is your favourite coffee?" required helperText="Such as Arabica, Robusta or Liberica" validationStatus="warning" validationText="A very long warning message to test if wrapping works">\n      <SlottedIcon />\n    </IcTextField>\n    <IcTextField rows="6" maxLength="25" value="Arabica" label="What is your favourite coffee?" required helperText="Such as Arabica, Robusta or Liberica" validationStatus="warning" validationText="A very long warning message to test if wrapping works">\n      <SlottedIcon />\n    </IcTextField>\n    <IcTextField maxLength="25" value="Tea" label="What is your favourite coffee?" required helperText="Such as Arabica, Robusta or Liberica" validationStatus="error" validationText="Now it has really gone to (coffee) pot">\n      <SlottedIcon />\n    </IcTextField>\n    <IcTextField rows="6" maxLength="25" value="Tea" label="What is your favourite coffee?" required helperText="Such as Arabica, Robusta or Liberica" validationStatus="error" validationText="Now it has really gone to (coffee) pot">\n      <SlottedIcon />\n    </IcTextField>\n    <IcTextField validationStatus="error" validationText="now it has really gone to (coffee) pot" value="6" inputmode="numeric" label="How many coffees do you want?" helperText="Our coffee machines have a maximum capacity of 4 coffees at a time." type="number" min="1" max="4" required>\n      <SlottedIcon />\n    </IcTextField>\n    <IcTextField validationStatus="error" validationText="now it has really gone to (coffee) pot" value="0" inputmode="numeric" label="How many coffees do you want?" helperText="Our coffee machines have a maximum capacity of 4 coffees at a time." type="number" min="1" max="4" required>\n      <SlottedIcon />\n    </IcTextField>\n    <IcTextField validationStatus="error" validationText="I\'m not familiar with this type of coffee" validationInlineInternal="true" value="Milkshake" label="What is your favourite coffee?" required hideLabel size="small" placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica">\n      <SlottedIcon />\n    </IcTextField>\n    </>,\n  name: "Validation"\n}',...Validation.parameters?.docs?.source}}},TextAreaWithResize.parameters={...TextAreaWithResize.parameters,docs:{...TextAreaWithResize.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTextField rows="6" maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" resize size="small" />,\n  name: "Text area with resize"\n}',...TextAreaWithResize.parameters?.docs?.source}}},Controlled.parameters={...Controlled.parameters,docs:{...Controlled.parameters?.docs,source:{originalSource:'{\n  render: () => <ControlledExample />,\n  name: "Controlled"\n}',...Controlled.parameters?.docs?.source}}},Uncontrolled_.parameters={...Uncontrolled_.parameters,docs:{...Uncontrolled_.parameters?.docs,source:{originalSource:'{\n  render: () => <Uncontrolled />,\n  name: "Uncontrolled"\n}',...Uncontrolled_.parameters?.docs?.source}}},MinAndMax.parameters={...MinAndMax.parameters,docs:{...MinAndMax.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTextField inputmode="numeric" label="How many coffees do you want?" type="number" min={1} max={4} helperText="Our coffee machines have a maximum capacity of 4 coffees at a time." />,\n  name: "Min and max"\n}',...MinAndMax.parameters?.docs?.source}}},MaximumAndMinimumCharacters.parameters={...MaximumAndMinimumCharacters.parameters,docs:{...MaximumAndMinimumCharacters.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <IcTextField max-characters={2} label="What is your favourite coffee?" helper-text="Short answers only."></IcTextField>\n    <IcTextField min-characters={3} label="What is your favourite coffee?" helper-text="Long answer please."></IcTextField>\n    </>,\n  name: "Maximum and minimum characters"\n}',...MaximumAndMinimumCharacters.parameters?.docs?.source}}},HiddenInput_.parameters={...HiddenInput_.parameters,docs:{...HiddenInput_.parameters?.docs,source:{originalSource:'{\n  render: () => <HiddenInput />,\n  name: "Hidden input"\n}',...HiddenInput_.parameters?.docs?.source}}},Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:'{\n  render: args => <IcTextField label={args.label} disabled={args.disabled} fullWidth={args.fullWidth} helperText={args.helperText} hideLabel={args.hideLabel} inputId={args.inputId} inputmode={args.inputmode} max={args.max} maxCharacters={args.maxCharacters} maxLength={args.maxLength} maxLengthMessage={args.maxLengthMessage} min={args.min} minCharacters={args.minCharacters} name={args.name} placeholder={args.placeholder} readonly={args.readonly} required={args.required} resize={args.resize} rows={args.rows} size={args.size} spellcheck={args.spellcheck} type={args.type} validationInline={args.validationInline} validationStatus={args.validationStatus} validationText={args.validationText} debounce={args.debounce} onIcChange={ev => console.log(ev.detail.value)}>\n      {args.showIconSlot && <SlottedSVG slot="icon" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="#000000">\n          <path d="M0 0h24v24H0z" fill="none" />\n          <path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z" />\n        </SlottedSVG>}\n    </IcTextField>,\n  args: defaultArgs,\n  argTypes: {\n    inputmode: {\n      options: ["none", "text", "tel", "url", "email", "numeric", "decimal", "search"],\n      control: {\n        type: "select"\n      }\n    },\n    size: {\n      options: ["default", "small"],\n      control: {\n        type: "inline-radio"\n      }\n    },\n    type: {\n      options: ["email", "password", "tel", "text", "url", "number", "search"],\n      control: {\n        type: "select"\n      }\n    },\n    validationStatus: {\n      options: ["warning", "error", "success", "none"],\n      mapping: {\n        warning: "warning",\n        error: "error",\n        success: "success",\n        none: ""\n      },\n      control: {\n        type: "select"\n      }\n    },\n    showIconSlot: {\n      control: {\n        type: "boolean"\n      }\n    }\n  },\n  name: "Playground"\n}',...Playground.parameters?.docs?.source}}}},"../web-components/src/components/ic-text-field/readme.md":module=>{module.exports='# ic-textfield\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property             | Attribute            | Description                                                                                                                                                                        | Type| Default                               |\n| -------------------- | -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || ------------------------------------- |\n| `autoFocus`          | `auto-focus`         | If `true`, the form control will have input focus when the page loads.                                                                                                             | `boolean`| `false`                               |\n| `autocapitalize`     | `autocapitalize`     | The automatic capitalisation of the text value as it is entered/edited by the user. Available options: "off", "none", "on", "sentences", "words", "characters".                    | `string`| `"off"`                               |\n| `autocomplete`       | `autocomplete`       | The state of autocompletion the browser can apply on the text value.                                                                                                               | `"name" \\| "on" \\| "off" \\| "honorific-prefix" \\| "given-name" \\| "additional-name" \\| "family-name" \\| "honorific-suffix" \\| "nickname" \\| "email" \\| "username" \\| "new-password" \\| "current-password" \\| "one-time-code" \\| "organization-title" \\| "organization" \\| "street-address" \\| "address-line1" \\| "address-line2" \\| "address-line3" \\| "address-level4" \\| "address-level3" \\| "address-level2" \\| "address-level1" \\| "country" \\| "country-name" \\| "postal-code" \\| "cc-name" \\| "cc-given-name" \\| "cc-additional-name" \\| "cc-family-name" \\| "cc-number" \\| "cc-exp" \\| "cc-exp-month" \\| "cc-exp-year" \\| "cc-csc" \\| "cc-type" \\| "transaction-currency" \\| "transaction-amount" \\| "language" \\| "bday" \\| "bday-day" \\| "bday-month" \\| "bday-year" \\| "sex" \\| "tel" \\| "tel-country-code" \\| "tel-national" \\| "tel-area-code" \\| "tel-local" \\| "tel-extension" \\| "impp" \\| "url" \\| "photo"` | `"off"`                               |\n| `autocorrect`        | `autocorrect`        | The state of autocorrection the browser can apply when the user is entering/editing the text value.                                                                                | `"off" \\| "on"`| `"off"`                               |\n| `debounce`           | `debounce`           | The amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.                                                                                 | `number`| `0`                                   |\n| `disabled`           | `disabled`           | If `true`, the disabled state will be set.                                                                                                                                         | `boolean`| `false`                               |\n| `fullWidth`          | `full-width`         | Specify whether the text field fills the full width of the container. If `true`, this overrides the --input-width CSS variable.                                                    | `boolean`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | `false`                               |\n| `helperText`         | `helper-text`        | The helper text that will be displayed for additional field guidance.                                                                                                              | `string`| `""`                                  |\n| `hideLabel`          | `hide-label`         | If `true`, the label will be hidden and the required label value will be applied as an aria-label.                                                                                 | `boolean`| `false`                               |\n| `inputId`            | `input-id`           | The ID for the input.                                                                                                                                                              | `string`| ``ic-text-field-input-${inputIds++}`` |\n| `inputmode`          | `inputmode`          | A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.                   | `"decimal" \\| "email" \\| "none" \\| "numeric" \\| "search" \\| "tel" \\| "text" \\| "url"`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | `"text"`                              |\n| `label` _(required)_ | `label`              | The label for the input.                                                                                                                                                           | `string`| `undefined`                           |\n| `max`                | `max`                | The maximum number that can be accepted as a value, when `type` is `number` and `rows` is `1`. (NOTE: Ensure to include visual indication of max value in `helperText` or `label`) | `number \\| string`| `undefined`                           |\n| `maxCharacters`      | `max-characters`     | The maximum number of characters that can be entered in the field. Will display an error if too many characters are entered.                                                       | `number`| `0`                                   |\n| `maxLength`          | `max-length`         | The count of characters in the field. Will display a warning if the bound is reached.                                                                                              | `number`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | `0`                                   |\n| `maxLengthMessage`   | `max-length-message` | The text to display as the validation message when the maximum length is exceeded.                                                                                                 | `string`| `"Maximum length exceeded"`           |\n| `min`                | `min`                | The minimum number that can be accepted as a value, when `type` is `number` and `rows` is `1`. (NOTE: Ensure to include visual indication of min value in `helperText` or `label`) | `number \\| string`| `undefined`                           |\n| `minCharacters`      | `min-characters`     | The minimum number of characters that can be entered in the field.                                                                                                                 | `number`| `0`                                   |\n| `name`               | `name`               | The name of the control, which is submitted with the form data.                                                                                                                    | `string`| `this.inputId`                        |\n| `placeholder`        | `placeholder`        | The placeholder value to be displayed.                                                                                                                                             | `string`| `""`                                  |\n| `readonly`           | `readonly`           | If `true`, the read only state will be set.                                                                                                                                        | `boolean`| `false`                               |\n| `required`           | `required`           | If `true`, the input will require a value.                                                                                                                                         | `boolean`| `false`                               |\n| `resize`             | `resize`             | If `true`, the multiline text area will be resizeable.                                                                                                                             | `boolean`| `false`                               |\n| `rows`               | `rows`               | The number of rows to transform the text field into a text area with a specific height.                                                                                            | `number`| `1`                                   |\n| `size`               | `size`               | The size of the text field component.                                                                                                                                              | `"default" \\| "small"`| `"default"`                           |\n| `small`              | `small`              | <span style="color:red">**[DEPRECATED]**</span> This prop should not be used anymore. Set prop `size` to "small" instead.<br/><br/>                                                | `boolean`| `false`                               |\n| `spellcheck`         | `spellcheck`         | If `true`, the value of the text field will have its spelling and grammar checked.                                                                                                 | `boolean`| `false`                               |\n| `type`               | `type`               | The type of control to display. The default type is text.                                                                                                                          | `"email" \\| "number" \\| "password" \\| "search" \\| "tel" \\| "text" \\| "url"`| `"text"`                              |\n| `validationInline`   | `validation-inline`  | If `true`, the icon in input control will be displayed - only applies when validationStatus =\'success\'.                                                                            | `boolean`| `false`                               |\n| `validationStatus`   | `validation-status`  | The validation state - e.g. \'error\' \\| \'warning\' \\| \'success\'.                                                                                                                     | `"" \\| "error" \\| "success" \\| "warning"`| `""`                                  |\n| `validationText`     | `validation-text`    | The validation state - e.g. \'error\' \\| \'warning\' \\| \'success\'.                                                                                                                     | `string`| `""`                                  |\n| `value`              | `value`              | The value of the text field.                                                                                                                                                       | `string`| `""`                                  |\n\n\n## Events\n\n| Event       | Description                             | Type                                     |\n| ----------- | --------------------------------------- | ---------------------------------------- |\n| `icBlur`    | Emitted when input loses focus.         | `CustomEvent<IcValueEventDetail>`        |\n| `icChange`  | Emitted when the value has changed.     | `CustomEvent<IcValueEventDetail>`        |\n| `icFocus`   | Emitted when input gains focus.         | `CustomEvent<IcValueEventDetail>`        |\n| `icInput`   | Emitted when a keyboard input occurred. | `CustomEvent<IcValueEventDetail>`        |\n| `icKeydown` | Emitted when a keydown event occurred.  | `CustomEvent<{ event: KeyboardEvent; }>` |\n\n\n## Methods\n\n### `setFocus() => Promise<void>`\n\nSets focus on the native `input`.\n\n#### Returns\n\nType: `Promise<void>`\n\n\n\n\n## Slots\n\n| Slot     | Description                                           |\n| -------- | ----------------------------------------------------- |\n| `"icon"` | Content will be placed to the left of the text input. |\n\n\n## CSS Custom Properties\n\n| Name            | Description              |\n| --------------- | ------------------------ |\n| `--input-width` | Width of the input field |\n\n\n## Dependencies\n\n### Used by\n\n - [ic-search-bar](../ic-search-bar)\n\n### Depends on\n\n- [ic-input-container](../ic-input-container)\n- [ic-input-label](../ic-input-label)\n- [ic-input-component-container](../ic-input-component-container)\n- [ic-input-validation](../ic-input-validation)\n- [ic-typography](../ic-typography)\n\n### Graph\n```mermaid\ngraph TD;\n  ic-text-field --\x3e ic-input-container\n  ic-text-field --\x3e ic-input-label\n  ic-text-field --\x3e ic-input-component-container\n  ic-text-field --\x3e ic-input-validation\n  ic-text-field --\x3e ic-typography\n  ic-input-label --\x3e ic-typography\n  ic-input-validation --\x3e ic-typography\n  ic-search-bar --\x3e ic-text-field\n  style ic-text-field fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n\n'}}]);